# Load SQL Server SMO (SQL Management Objects)
Add-Type -AssemblyName "Microsoft.SqlServer.Smo"
Add-Type -AssemblyName "Microsoft.SqlServer.SqlEnum"

# Define SQL Server instance
$serverName = "PLX-SQLPROD\QCPROD" 
$server = New-Object Microsoft.SqlServer.Management.Smo.Server($serverName)

# Get SQL Server Agent jobs
$jobs = $server.JobServer.Jobs

# Loop through jobs and get schedule details
foreach ($job in $jobs) {
    foreach ($schedule in $job.JobSchedules) {
        if ($schedule.IsEnabled) {
            Write-Host "Job Name: $($job.Name)"
            Write-Host "  Schedule Name: $($schedule.Name)"
            Write-Host "  Frequency Type: $($schedule.FrequencyTypes)"
            Write-Host "  Frequency Interval: $($schedule.FrequencyInterval)"
            Write-Host "  Frequency Subday Type: $($schedule.FrequencySubDayTypes)"
            Write-Host "  Frequency Subday Interval: $($schedule.FrequencySubDayInterval)"
            Write-Host "  Active Start Time: $($schedule.ActiveStartTimeOfDay)"
            Write-Host "  Active Start Date: $($schedule.ActiveStartDate)"
            Write-Host "  Enabled: $($schedule.IsEnabled)"
            Write-Host "---------------------------------------------"
        }
    }
}



To run the PowerShell script that queries SQL Server Agent schedules, follow these steps:

---

### âœ… **Step-by-Step Instructions**

#### **1. Open PowerShell as Administrator**
- Press `Windows + X` and choose **Windows PowerShell (Admin)** or **Terminal (Admin)**.
- This ensures you have the necessary permissions.

#### **2. Ensure SMO is Installed**
If you havenâ€™t installed **SQL Server Management Objects (SMO)**, run this command to install it via PowerShell:

```powershell
Install-Package -Name Microsoft.SqlServer.SqlManagementObjects -Source NuGet -Force
```

> You may need to install NuGet provider if prompted.

#### **3. Save the Script to a `.ps1` File**
Open Notepad or your favorite editor, paste the script, and save it as:

```plaintext
Get-SqlAgentSchedules.ps1
```

#### **4. Modify the Server Name**
Update this line in the script to match your SQL Server instance:

```powershell
$serverName = "localhost"  # Change to "YourServerName\InstanceName" if needed
```

#### **5. Run the Script**
Navigate to the folder where you saved the script and run:

```powershell
Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
.\Get-SqlAgentSchedules.ps1
```

---

### ðŸ§  Tip: Troubleshooting

- If you get an error about SMO types not found, make sure the SMO package is installed and PowerShell is restarted.
- If connecting to a remote SQL Server, ensure you have network access and permissions.
- You can also run the script inside **SQL Server Management Studio (SSMS)** PowerShell host.

---

Would you like a version that exports the results to a CSV or filters by specific job names or schedule types?


To run the PowerShell script that queries SQL Server Agent schedules, follow these steps:

---

### âœ… **Step-by-Step Instructions**

#### **1. Open PowerShell as Administrator**
- Press `Windows + X` and choose **Windows PowerShell (Admin)** or **Terminal (Admin)**.
- This ensures you have the necessary permissions.

#### **2. Ensure SMO is Installed**
If you havenâ€™t installed **SQL Server Management Objects (SMO)**, run this command to install it via PowerShell:

```powershell
Install-Package -Name Microsoft.SqlServer.SqlManagementObjects -Source NuGet -Force
```

> You may need to install NuGet provider if prompted.

#### **3. Save the Script to a `.ps1` File**
Open Notepad or your favorite editor, paste the script, and save it as:

```plaintext
Get-SqlAgentSchedules.ps1
```

#### **4. Modify the Server Name**
Update this line in the script to match your SQL Server instance:

```powershell
$serverName = "localhost"  # Change to "YourServerName\InstanceName" if needed
```

#### **5. Run the Script**
Navigate to the folder where you saved the script and run:

```powershell
Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
.\Get-SqlAgentSchedules.ps1
```

---

### ðŸ§  Tip: Troubleshooting

- If you get an error about SMO types not found, make sure the SMO package is installed and PowerShell is restarted.
- If connecting to a remote SQL Server, ensure you have network access and permissions.
- You can also run the script inside **SQL Server Management Studio (SSMS)** PowerShell host.

---

Would you like a version that exports the results to a CSV or filters by specific job names or schedule types?



 Install-Package : Unable to find package source 'NuGet'. Use Get-PackageSource to see all available package sources.
At line:1 char:1
+ Install-Package -Name Microsoft.SqlServer.SqlManagementObjects -Sourc ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Microsoft.Power....InstallPackage:InstallPackage) [Install-Package], Exception
    + FullyQualifiedErrorId : SourceNotFound,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage 

